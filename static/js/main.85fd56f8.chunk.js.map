{"version":3,"sources":["actions.js","action-item-manager-redux.js","App.js","serviceWorker.js","index.js"],"names":["C","items","state","action","type","description","done","splice","index","slice","item","length","ActionItemManagerRedux","props","store","subscribe","forceUpdate","this","React","Component","ActionItemLayout","newItemRef","createRef","Container","Row","className","Col","xs","Button","onClick","blob","Blob","JSON","stringify","getState","saveAs","Form","FormGroup","Control","onChange","e","files","target","file","reader","FileReader","readAsText","onloadend","console","log","result","data","parse","dispatch","importItems","onSubmit","preventDefault","current","value","Group","name","ref","ActionItemList","map","i","key","toString","size","variant","disabled","Check","checked","id","label","md","App","localStorage","createStore","combineReducers","getItem","sampleState","setItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85fd56f8.chunk.js","sourcesContent":["// action types\n\n//export const C = {\nconst C = {\n  ADD_ITEM: 'ADD_ITEM',\n  MAKE_TOP: 'MAKE_TOP',\n  CHANGE_DONE: 'CHANGE_DONE',\n  DELETE_ITEM: 'DELETE_ITEM',\n  IMPORT_ITEMS: 'IMPORT_ITEMS',\n};\n\n// reducers (state + action = new state)\n\nexport const items = (state = [], action) => {\n  switch (action.type) {\n    case C.ADD_ITEM:\n      return [\n        {\n          description: action.description,\n          done: action.done\n        },\n        ...state\n      ];\n    case C.DELETE_ITEM:\n      state.splice(action.index, 1);\n      return state;\n    case C.MAKE_TOP:\n      return [\n        state[action.index], \n        ...state.slice(0, action.index), \n        ...state.slice(action.index + 1)\n      ];\n    case C.CHANGE_DONE:\n      state[action.index] = item(state[action.index], action);\n      if (action.done) {\n        state = [\n          ...state.slice(0, action.index), \n          ...state.slice(action.index + 1, action.index.length), \n          state[action.index], \n        ];\n      }\n      return state;\n    case C.IMPORT_ITEMS:\n      return action.items;\n    default:\n      return state;\n  }\n}\n\nexport const item = (state = {}, action) => {\n  switch (action.type) {\n    case C.CHANGE_DONE:\n      return {\n        ...state,\n        done: action.done,\n      };\n    default:\n      return state;\n  }\n}\n\n// action creators\n\nexport const addItem = (description) => (\n  {\n    type: C.ADD_ITEM,\n    description,\n    done: false,\n  }\n)\n\nexport const deleteItem = (index) => (\n  {\n    type: C.DELETE_ITEM,\n    index,\n  }\n)\n\nexport const changeDone = (index, done) => (\n  {\n    type: C.CHANGE_DONE,\n    index,\n    done,\n  }\n)\n\nexport const makeTop = (index) => (\n  {\n    type: C.MAKE_TOP,\n    index,\n  }\n)\n\nexport const importItems = (items) => (\n  {\n    type: C.IMPORT_ITEMS,\n    items,\n  }\n)\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { saveAs } from 'file-saver';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { changeDone, deleteItem, addItem, makeTop, importItems } from './actions';\nimport FormGroup from 'react-bootstrap/FormGroup';\n\nexport default class ActionItemManagerRedux extends React.Component {\n  constructor(props) {\n    super(props);\n\n    props.store.subscribe(() => this.forceUpdate());\n  }\n\n  render() {\n    return (\n      <ActionItemLayout store={this.props.store} />\n    );\n  }\n}\n\nconst ActionItemLayout = ({store}) => {\n  const clickExport = () => {\n    var blob = new Blob(\n      [JSON.stringify({items: store.getState().items})], \n      {type: \"text/plain;charset=utf-8\"}\n    );\n    saveAs(blob, \"action-item-manager-state.json\");\n  }\n\n  const submitAddItem = (e) => {\n    e.preventDefault();\n    store.dispatch(addItem(newItemRef.current.value));\n    newItemRef.current.value = '';\n  }\n\n  const changeChooseFile = (e) => {\n    let files = e.target.files;\n    if (files.length > 0) {\n      let file = files[0];\n      if (typeof file !== 'undefined') {\n        let reader = new FileReader();\n        reader.readAsText(file);\n        reader.onloadend = function () {\n          console.log(reader.result);\n          let data = JSON.parse(reader.result);\n          if (data.items !== 'undefined') {\n            let items = data.items;\n            console.log(data.items);\n            store.dispatch(importItems(items));\n          }\n        };\n      }\n    }\n  }\n\n\n  let newItemRef = React.createRef();\n\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n        <Col xs=\"auto\">\n          <h1 className=\"text-center\">\n            TODO List\n          </h1>\n        </Col>\n      </Row>\n      <Row className=\"d-print-none\">\n        <Col>\n          <Button onClick={clickExport} className=\"mb-3\">\n            Export JSON\n          </Button>\n          <Form className=\"\">\n            <Form.Row>\n              <FormGroup>\n                <Col>\n                  Import JSON:\n                </Col>\n                <Col>\n                  <Form.Control type=\"file\" className=\"mb-3\" onChange={changeChooseFile} />\n                </Col>\n              </FormGroup>\n            </Form.Row>\n          </Form>\n        </Col>\n      </Row>\n      <Form onSubmit={submitAddItem} className=\"\">\n        <Form.Row className=\"d-print-none\">\n          <Col xs={10}>\n            <Form.Group>\n              <Form.Control name=\"newItem\" ref={newItemRef}/>\n            </Form.Group>\n          </Col>\n          <Col xs={2}>\n            <Button type=\"submit\">\n              Add Item\n            </Button>\n          </Col>\n        </Form.Row>\n        <ActionItemList store={store} />\n      </Form>\n    </Container>\n  );\n}\n\nconst ActionItemList = ({store}) => (\n  <>\n    {store.getState().items ?\n      store.getState().items.map((e, i) => (\n        <Form.Row key={i.toString()} className={e.done ? \"font-weight-light\" : \"\"}>\n          <Col className=\"d-print-none\">\n            <Button size=\"sm\" variant=\"secondary\" onClick={() => store.dispatch(makeTop(i))} disabled={e.done}>\n              Top\n            </Button>\n          </Col>\n          <Col className=\"d-print-none\">\n            <Button size=\"sm\" variant=\"secondary\" onClick={() => store.dispatch(deleteItem(i))} disabled={!e.done}>\n              Delete\n            </Button>\n          </Col>\n          <Col className=\"d-print-none\">\n            <Form.Group>\n              <Form.Check type=\"checkbox\" checked={e.done} id={\"done_\" + i} onChange={(e) => store.dispatch(changeDone(i, e.target.checked))} label=\"Done\" />\n            </Form.Group>\n          </Col>\n          <Col xs={6} md={8} className=\"d-print-none\">\n            {e.description}\n          </Col>\n          <Col xs={true} className=\"d-none d-print-block\">\n            {e.description}\n          </Col>\n        </Form.Row>\n      ))\n    :\n      \"No Items\"\n    }\n  </>\n);\n\n","import React from 'react';\nimport { createStore, combineReducers } from 'redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n//import { C, items } from './actions';\nimport { items } from './actions';\nimport sampleState from './sampleStateMPB.json';\nimport ActionItemManagerRedux from './action-item-manager-redux';\n\n//const STORAGE_KEY = 'action-item-manager-state';\nconst STORAGE_KEY_REDUX = 'action-item-manager-state-redux';\n\n/*\nconst saveState = (userData) => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(userData));\n}\n*/\n\nfunction App() {\n  console.log(localStorage);\n\n  const store = createStore(\n    combineReducers({items}),\n      JSON.parse(localStorage.getItem(STORAGE_KEY_REDUX)) || \n      sampleState\n  );\n\n  store.subscribe(() => {\n    localStorage.setItem(STORAGE_KEY_REDUX, JSON.stringify(store.getState()));\n  });\n\n  return (\n    <ActionItemManagerRedux store={store} />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}